blueprint:
  name: Moisture Sensor Notifications v1.2
  description: >
    # ðŸ’§ Moisture Sensor Notifications
    
    **Version: 1.2**
    
    Send critical alerts when moisture sensors detect water leaks.
    
    <details>
    <summary><b>Features:</b> - Click here to expand</summary>


      - Multi-sensor monitoring with state-based triggers
      - iOS critical notifications (bypass Do Not Disturb)
      - Persistent UI notifications
      - Text-to-Speech announcements
      - Customizable repeat notifications
      - Action buttons for acknowledgment

    </details>

  domain: automation
  author: billchurch
  source_url: https://github.com/billchurch/ha-blueprints
  input:
    moisture_sensors:
      name: Moisture Sensors
      description: Select moisture sensors to monitor
      selector:
        entity:
          filter:
            device_class: moisture
          multiple: true
    notify_devices:
      name: Notification Devices
      description: Mobile devices to receive notifications
      selector:
        device:
          filter:
            integration: mobile_app
          multiple: true
    notification_title:
      name: Notification Title
      description: Title for moisture detection notifications
      default: "Moisture Detected!"
      selector:
        text:
    notification_message:
      name: Notification Message
      description: >
        Message template. Available variables:
        {{ trigger.to_state.name }} - Sensor name
        {{ trigger.entity_id }} - Sensor entity ID
        {{ trigger.to_state.state }} - Current state
        {{ area_name(trigger.entity_id) }} - Sensor area
      default: "Moisture detected by {{ trigger.to_state.name }} in {{ area_name(trigger.entity_id) | default('Unknown Location', true) }}"
      selector:
        text:
          multiline: true
    moisture_threshold:
      name: Moisture Threshold (%)
      description: >
        Trigger when sensor value exceeds this threshold.
        Set to 0 to trigger on any 'on', 'wet', or 'moisture' state.
      default: 0
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: "%"
          mode: slider
    enable_actions:
      name: Enable Action Buttons
      description: Add Acknowledge and View buttons to notifications
      default: false
      selector:
        boolean:
    repeat_enabled:
      name: Repeat Notifications
      description: Send notifications repeatedly while moisture is detected
      default: false
      selector:
        boolean:
    repeat_interval:
      name: Repeat Interval
      description: Minutes between repeated notifications
      default: 30
      selector:
        number:
          min: 5
          max: 1440
          unit_of_measurement: "min"
          mode: slider
    interruption_level:
      name: iOS Interruption Level
      description: >
        iOS notification interruption level.
        Critical alerts will bypass Do Not Disturb and silent mode.
      default: "active"
      selector:
        select:
          options:
            - label: "Passive (Minimal)"
              value: "passive"
            - label: "Active (Default)"
              value: "active"
            - label: "Time Sensitive"
              value: "time-sensitive"
            - label: "Critical (Bypass DND)"
              value: "critical"
    enable_ui_notification:
      name: Enable UI Notification
      description: Show persistent notification in Home Assistant UI
      default: false
      selector:
        boolean:
    enable_tts:
      name: Enable TTS Announcements
      description: Announce moisture detection via text-to-speech
      default: false
      selector:
        boolean:
    tts_service:
      name: TTS Service Provider
      description: Select the text-to-speech service to use
      default: []
      selector:
        entity:
          filter:
            domain: tts
    tts_targets:
      name: TTS Media Players
      description: Media players for TTS announcements
      selector:
        entity:
          domain: media_player
          multiple: true
    tts_message:
      name: TTS Announcement Message
      description: >
        Custom TTS announcement message. Available variables:
        {{ trigger.to_state.name }} - Sensor name
        {{ area_name(trigger.entity_id) }} - Sensor area
      default: "Alert! Moisture detected by {{ trigger.to_state.name }} in {{ area_name(trigger.entity_id) | default('Unknown Location', true) }}"
      selector:
        text:
          multiline: true

trigger:
  - platform: state
    entity_id: !input moisture_sensors
    
condition:
  - condition: template
    value_template: >
      {% set new_state = trigger.to_state.state %}
      {% set old_state = trigger.from_state.state if trigger.from_state else 'unknown' %}
      {% set threshold = moisture_threshold | float(0) %}
      
      {# State must have changed #}
      {% if new_state == old_state %}
        {{ false }}
      {# Check for moisture detection #}
      {% elif new_state in ['on', 'wet', 'moisture'] %}
        {{ true }}
      {# Check numeric threshold if set #}
      {% elif threshold > 0 and new_state not in ['off', 'dry', 'unavailable', 'unknown'] %}
        {{ new_state | float(0) > threshold }}
      {% else %}
        {{ false }}
      {% endif %}

variables:
  notify_devices: !input notify_devices
  notification_title: !input notification_title
  notification_message: !input notification_message
  moisture_threshold: !input moisture_threshold
  enable_actions: !input enable_actions
  repeat_enabled: !input repeat_enabled
  repeat_interval: !input repeat_interval
  interruption_level: !input interruption_level
  enable_ui_notification: !input enable_ui_notification
  enable_tts: !input enable_tts
  tts_service: !input tts_service
  tts_targets: !input tts_targets
  tts_message: !input tts_message

action:
  - variables:
      notification_data:
        tag: "moisture_{{ trigger.entity_id | replace('.', '_') }}"
        group: "moisture_alerts"
        importance: high
        channel: moisture_alerts
        ttl: 0
        priority: high
        persistent: true
        sticky: true
        clickAction: "/lovelace/{{ area_name(trigger.entity_id) | lower | replace(' ', '-') | default('home', true) }}"
        push:
          interruption-level: "{{ interruption_level }}"
        actions: >
          {% if enable_actions %}
            [{
              "action": "ACK_{{ trigger.entity_id | replace('.', '_') | upper }}",
              "title": "Acknowledge"
            },
            {
              "action": "VIEW_{{ trigger.entity_id | replace('.', '_') | upper }}",
              "title": "View Sensor",
              "uri": "/lovelace/{{ area_name(trigger.entity_id) | lower | replace(' ', '-') | default('home', true) }}"
            }]
          {% else %}
            []
          {% endif %}
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ repeat_enabled }}"
        sequence:
          - repeat:
              while:
                - condition: template
                  value_template: >
                    {{ is_state(trigger.entity_id, trigger.to_state.state) }}
              sequence:
                - repeat:
                    for_each: "{{ notify_devices }}"
                    sequence:
                      - service: notify.mobile_app_{{ device_attr(repeat.item, 'name') | replace(' ', '_') | replace('-', '_') | lower }}
                        data:
                          title: "{{ notification_title }}"
                          message: "{{ notification_message }}"
                          data: "{{ notification_data }}"
                - choose:
                    - conditions:
                        - condition: template
                          value_template: "{{ enable_ui_notification }}"
                      sequence:
                        - service: persistent_notification.create
                          data:
                            title: "{{ notification_title }}"
                            message: "{{ notification_message }}"
                            notification_id: "moisture_{{ trigger.entity_id | replace('.', '_') }}"
                - choose:
                    - conditions:
                        - condition: template
                          value_template: "{{ enable_tts }}"
                      sequence:
                        - action: tts.speak
                          target:
                            entity_id: !input tts_service
                          data:
                            media_player_entity_id: !input tts_targets
                            message: "{{ tts_message }}"
                - delay:
                    minutes: "{{ repeat_interval }}"
    default:
      - repeat:
          for_each: "{{ notify_devices }}"
          sequence:
            - service: notify.mobile_app_{{ device_attr(repeat.item, 'name') | replace(' ', '_') | replace('-', '_') | lower }}
              data:
                title: "{{ notification_title }}"
                message: "{{ notification_message }}"
                data: "{{ notification_data }}"
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ enable_ui_notification }}"
            sequence:
              - service: persistent_notification.create
                data:
                  title: "{{ notification_title }}"
                  message: "{{ notification_message }}"
                  notification_id: "moisture_{{ trigger.entity_id | replace('.', '_') }}"
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ enable_tts }}"
            sequence:
              - action: tts.speak
                target:
                  entity_id: !input tts_service
                data:
                  media_player_entity_id: !input tts_targets
                  message: "{{ tts_message }}"

mode: parallel
max: 10